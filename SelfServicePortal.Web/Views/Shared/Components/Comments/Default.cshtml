@model List<IncidentCommentViewModel>

<div class="card mb-4">
    <div class="card-header bg-light">
        <h6 class="mb-0"><i class="bi bi-chat-dots"></i> Comments</h6>
    </div>
    <div class="card-body">
        <div class="comments-section mb-3" style="max-height: 400px; overflow-y: auto;">
            @await Html.PartialAsync("_CommentsList", Model)
        </div>

        <form id="commentForm" class="mt-3">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <textarea id="commentText" class="form-control" rows="2" placeholder="Add a comment..."></textarea>
            </div>
            <div class="text-end mt-2">
                <button type="button" class="btn btn-primary btn-sm" onclick="addComment()">
                    <i class="bi bi-send"></i> Add Comment
                </button>
            </div>
        </form>
    </div>
</div>

<script>
function addComment() {
    const text = document.getElementById('commentText').value;
    if (!text.trim()) return;

    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/Incident/AddComment/@ViewContext.RouteData.Values["id"]';

    const textInput = document.createElement('input');
    textInput.type = 'hidden';
    textInput.name = 'text';
    textInput.value = text;

    const tokenInput = document.createElement('input');
    tokenInput.type = 'hidden';
    tokenInput.name = '__RequestVerificationToken';
    tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;

    form.appendChild(textInput);
    form.appendChild(tokenInput);

    fetch(form.action, {
        method: 'POST',
        body: new FormData(form)
    })
    .then(response => {
        if (response.ok) {
            document.getElementById('commentText').value = '';
            refreshComments();
        } else {
            alert('Failed to add comment. Please try again.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to add comment. Please try again.');
    });
}

function deleteComment(commentId) {
    if (!confirm('Are you sure you want to delete this comment?')) return;

    const form = document.createElement('form');
    form.method = 'POST';
    form.action = `/Incident/DeleteComment/@ViewContext.RouteData.Values["id"]?commentId=${commentId}`;

    const tokenInput = document.createElement('input');
    tokenInput.type = 'hidden';
    tokenInput.name = '__RequestVerificationToken';
    tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;

    form.appendChild(tokenInput);

    fetch(form.action, {
        method: 'POST',
        body: new FormData(form)
    })
    .then(response => {
        if (response.ok) {
            refreshComments();
        } else {
            alert('Failed to delete comment. Please try again.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to delete comment. Please try again.');
    });
}

function refreshComments() {
    fetch('/Incident/GetComments/@ViewContext.RouteData.Values["id"]')
        .then(response => response.text())
        .then(html => {
            document.querySelector('.comments-section').innerHTML = html;
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to refresh comments. Please try again.');
        });
}
</script>